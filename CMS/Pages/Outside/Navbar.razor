@implements IDisposable
@inject StateContainer StateContainer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage localStorage
@inject IJSRuntime Js
@inject NavigationManager _navManager;

<div class="bg-white">
    <div class="container">
        <div class="d-flex align-items-center justify-content-around p-3">
            <img src="@logo" style="width:70px" />
            <div style=" font-size: 16px; margin: 0.4375em 0 0;">

                <p class="site-title" style="font-weight: 700;font-size: 26px;margin: 0; color: var(--BaseColor) !important;">@title</p>
                <p class="site-description" style="font-weight: 700;color: #6c757d;">@comment</p>
            </div>
        </div>
    </div>
</div>
<nav id="navbar" class="navbar navbar-expand-lg navbar-light p-0">
    <div class="container">
        <button class="navbar-toggler navbarIcon" type="button" onclick="showOffcanvas('offcanvasMenu')">
            <span class="navbar-toggler-icon" style="background-color:transparent"></span>
        </button>
        <div class="collapse navbar-collapse">
            <ul class="navbar-nav fw500">
                @foreach (var item in menus)
                {
                    <MenuItem Item="item" Child="false" />
                }
            </ul>
        </div>
        <div>
            <ul class="navbar-nav fw500" style="flex-direction: row;">
                <li class="nav-Item navbarIcon" onclick="showNavSearch()">
                    <span class="svgSearch"></span>
                </li>
                <NavLink href="/basket" Match="NavLinkMatch.All">
                <li class="nav-Item navbarIcon" style="position:relative">
                    <span class="svgShoppingCart" ></span>
                    @if (count > 0)
                    {
                        <span class="badge12">@count</span>
                    }
                    </li>
                </NavLink>
            </ul>

        </div>
    </div>
</nav>
<div id="fixNavbar" class="disable navbar navbar-expand-lg navbar-light fixed-top p-0 d-hide"></div>

<div id="navSearch" class="navbar navbar-expand-lg navbar-light py-2 mb-3 d-none">
    <div class="container">
        <div class="input-group" style="max-width: 450px;margin: auto;">
            <button type="submit" class="btn btn-primary" onclick="hideNavSearch()" style="padding: 0 5px;">
                <span class="svgClose bg-white" style="width: 30px;height: 30px;margin: 5px 0 0;"></span>
            </button>
            <input type="text" class="form-control" @bind="searchText" />
            <button type="submit" class="btn btn-primary" @onclick="navSearchSelect">جستجو</button>
        </div>
    </div>
</div>

<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasMenu">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title">@title</h5>
        <button type="button" class="btn-close text-reset" onclick="hideOffcanvas('offcanvasMenu')" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="position-sticky">
            <div class="list-group list-group-flush mx-3 mt-4">
                @foreach (var item in menus)
                {
                    <MenuItemOffcanvas Item="item" Child="false" />
                }
            </div>
        </div>
    </div>
</div>

@code {
    string logo = "";
    string title = "";
    string comment = "";
    List<CMS.Model.Menu> menus = new List<Model.Menu>();
    int count = 0;
    string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        logo = CMS.Model.Option.GetItem( Model.OptionType.Icon).Text;
        title = CMS.Model.Option.GetItem(Model.OptionType.Title).Text;
        comment = CMS.Model.Option.GetItem(Model.OptionType.Comment).Text;
        menus = CMS.Model.Menus.GetList(new Model.MenuVM { Published = true });

        StateContainer.OnChangeShopCount += ChangeShopCount;
    }
    public void Dispose()
    {
        StateContainer.OnChangeShopCount -= ChangeShopCount;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ChangeShopCount();
        }
    }
    private async void ChangeShopCount()
    {
        var basket = await localStorage.GetAsync<List<string>>("basket");
        if (!basket.Success)
            count = 0;
        else 
            count = basket.Value.ToList().Count;
        await Js.InvokeVoidAsync("setNavbar");
        StateHasChanged();
    }
    private async void navSearchSelect()
    {
        if (string.IsNullOrEmpty(searchText))
            return;
        await Js.InvokeVoidAsync("hideNavSearch");
        _navManager.NavigateTo($"search/{searchText.Replace(" ","-")}");
        searchText = "";
        StateHasChanged();
    }


}
