@page "/{name?}"
@inherits BacePage<BasePageObj>
@using CMS.Model;
@inject IJSRuntime Js
@inject NavigationManager _navManager

<PageTitle>post</PageTitle>
@{
    <meta name='robots' content='noindex, follow' />
    base.BuildRenderTree(__builder);
}


<div class="container main">
    <div class="mainSlideLeft">
        @if (post != null)
        {
            <div class="card rounded-0 w-100">
                <div style="max-height: 200px; position:relative">
                    <div class="postTitle">
                        <h1 class="h2">@post.Title</h1>
                    </div>
                    <img src="@post.Img" class="card-img-top rounded-0" alt="@post.Title">
                </div>
                <div class="card-body post mt-3">
                    @((MarkupString)post.Content)
                    @if (scoreComment.ScoreCount > 0)
                    {
                        <div class="text-center">
                            <div class="star3"><span class="star3 active" style='width:@($"{scoreComment.ScorePercent}%")'></span></div>
                        </div>
                        <div class="commentDate rtl">تعداد امتیازها : @scoreComment.ScoreCount میانگین امتیاز @scoreComment.ScoreAvg از 5</div>
                    }
                    <div class="commentDate rtl mb-3">تاریخ ارسال مطلب : @post.Date.ToPersion()</div>
                </div>
            </div>
            @if (!isMenuPost)
            {
                <NextAndPrev Items="nextAndPrev" />
                <Related Items="related" />
                @if (postOption.IsComment)
                {
                    <Comment Post="post" Obj="Obj" ListComment="scoreComment.Comments" />
                }
            }

        }
        else if (isPostNull)
        {
            <Error404 />
        }
        else
        {
            <div>درحال بارگزاری</div>
        }

    </div>
    <RightMenu />
</div>


@code {
    [Parameter]
    public string name { get; set; }

    BasePageObj obj = new BasePageObj();
    public override BasePageObj Obj { get => obj; set => obj = value; }

    CMS.Dal.DataSource.PostDataSource db = new CMS.Dal.DataSource.PostDataSource();
    CMS.Dal.DataSource.PostOptionDataSource dbPostOption = new CMS.Dal.DataSource.PostOptionDataSource();
    CMS.Pages.Inside.Comment.CommentHelper commentHelper = new Inside.Comment.CommentHelper(null);

    ScoreComment scoreComment = new ScoreComment();
    CMS.Model.Post post { get; set; }
    CMS.Model.PostOption postOption { get; set; }

    List<Post> nextAndPrev = new List<Post>();
    List<Post> related = new List<Post>();

    bool isPostNull = false;
    bool isMenuPost = false;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        await Js.InvokeVoidAsync("PageInit");
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        isPostNull = false;
        isMenuPost = false;
        post = null;
        nextAndPrev = new List<Post>();
        if (!string.IsNullOrEmpty(name))
            await SeletePost();

        if (postOption?.Redirect != "")
            _navManager.NavigateTo(postOption.Redirect);
    }

    async Task SeletePost()
    {
        var result = await db.GetByAliasAsync(name, published: true, isProduct: false);
        if (result.Data == null)
        {
            await SeleteMenuPost();
            return;
        }
        post = result.Data;

        if (post == null)
            return;

        await selectPostOption();

        var resultNextAndPrev = await db.NextAndPrevAsync(post);
        nextAndPrev = resultNextAndPrev.Data;

        var resultRelated = await db.RelatedAsync(post, 3);
        related = resultRelated.Data;

        await selectComments();
    }

    async Task SeleteMenuPost()
    {
        var result = await db.GetMenuPost(name);
        if (result.Data == null)
        {
            isPostNull = true;
            return;
        }
        isMenuPost = true;
        post = result.Data;
    }

    async Task selectPostOption()
    {
        var resultPostOption = await dbPostOption.GetAsync(unicId: post.UnicId);
        if (resultPostOption.Data == null)
        {
            return;
        }
        postOption = resultPostOption.Data;
    }

    async Task selectComments()
    {
        if (postOption?.IsComment == false)
            return;

        scoreComment = new ScoreComment();
        var result = await commentHelper.List(new CommentVM { PostId = post.Id, Type = CommentType.منتشر_شده });
        scoreComment = result.Data;
    }
}
