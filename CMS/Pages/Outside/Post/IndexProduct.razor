@page "/product/{name?}"
@inherits BacePage<BasePageObj>
@using CMS.Model;
@inject IJSRuntime Js

<PageTitle>product</PageTitle>
@{
    base.BuildRenderTree(__builder);
}

<div class="container main">
    <div class="mainSlideLeft">
        @if (post != null && product!= null)
        {
            <div class="card rounded-0 w-100">
                <ProductTop Product="product" Post="post" ScoreComment="scoreComment" />

                @if (productPropertys.Count > 0)
                {
                    <div class="card-body mt-3" id="PropertyTab">
                        <span class="=h5 fw-bold">مشخصات</span>
                        <hr />
                        @foreach (var productProperty in productPropertys)
                        {
                            <div class="productProperty">
                                <span class="productPropertyName">@productProperty.Name</span>
                                <span class="productPropertyValue">@productProperty.Value</span>
                                
                            </div>
                        }
                    </div>
                }

                <div class="card-body mt-3" id="ContentTab">
                    <span class="=h5 fw-bold">توضیحات</span>
                        <hr />
                    @((MarkupString)post.Content)
                </div>
            </div>

            <NextAndPrev Items="nextAndPrev" Link="/product" />
            <Related Items="related" Link="/product" />
            <Comment Post="post" Obj="Obj" ListComment="scoreComment.Comments" />

        }
        else if (isPostNull)
        {
            <Error404 />
        }
        else
        {
            <div>درحال بارگزاری</div>
        }

    </div>
    <RightMenu />
</div>


@code {
    [Parameter]
    public string name { get; set; }

    BasePageObj obj = new BasePageObj();
    public override BasePageObj Obj { get => obj; set => obj = value; }

    CMS.Dal.DataSource.PostDataSource db = new CMS.Dal.DataSource.PostDataSource();
    CMS.Dal.DataSource.ProductDataSource dbProduct = new CMS.Dal.DataSource.ProductDataSource();
    CMS.Pages.Inside.Comment.CommentHelper commentHelper = new Inside.Comment.CommentHelper(null);

    ScoreComment scoreComment = new ScoreComment();
    CMS.Model.Post post { get; set; }
    CMS.Model.Product product { get; set; }
    List<ProductProperty> productPropertys = new List<ProductProperty>();

    List<Post> nextAndPrev = new List<Post>();
    List<Post> related = new List<Post>();
    bool isPostNull = false;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        await Js.InvokeVoidAsync("PageInit");
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        isPostNull = false;
        post = null;
        product = null;
        nextAndPrev = new List<Post>();
        if (!string.IsNullOrEmpty(name))
            await SeletePost();
    }

    async Task SeletePost()
    {
        var result = await db.GetByAliasAsync(name, published: true, isProduct: true);
        if (result.Data == null)
        {
            isPostNull = true;
            return;
        }
        post = result.Data;

        var resultProduct = await dbProduct.GetAsync(unicId: post.UnicId);
        if (resultProduct.Data == null)
        {
            isPostNull = true;
            return;
        }
        product = resultProduct.Data;
        productPropertys = product.GetPropertys();

        var resultNextAndPrev = await db.NextAndPrevAsync(post);
        nextAndPrev = resultNextAndPrev.Data;

        var resultRelated = await db.RelatedAsync(post, 3);
        related = resultRelated.Data;
        
        await selectComments();
    }

    async Task selectComments()
    {
        scoreComment = new ScoreComment();
        var result = await commentHelper.List(new CommentVM { PostId = post.Id, Type = CommentType.منتشر_شده });
        scoreComment = result.Data;
    }
}
