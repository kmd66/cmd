@using CMS.Model;
@inject IJSRuntime Js
@implements IAsyncDisposable


<div class="row">
    <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
        <label class="form-label required">نام </label>
        <input type="text" class="form-control" @bind="Obj.EditItem.Title">
    </div>
    <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
        <label class="form-label required">نام مستعار </label>
        <input type="text" class="form-control" @bind="Obj.EditItem.Alias">
    </div>
    <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
        <label class="form-label">والد</label>
        <select class="form-select " aria-label="Default select example" @bind="Obj.EditItem.MenuId">
            <option value="@Guid.Empty">ریشه</option>
            @foreach (var m in Obj.Menues)
            {
                <option value="@m.UnicId">@m.Name</option>
            }
        </select>
    </div>
</div>

<div id="editorHeder">
    <div>
        <button onclick="ShowModal('fileManagerModal2')" type="button" class="ql-btn-image" id="InsertImge">
            <svg viewBox="0 0 18 18">
                <rect class="ql-stroke" height="10" width="12" x="3" y="4"></rect>
                <circle class="ql-fill" cx="6" cy="7" r="1"></circle>
                <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline>
            </svg>
        </button>
        <button @onclick="VisibilEditor" type="button" class="ql-btn-image">
            <svg viewBox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"></line> </svg>
        </button>
    </div>
    <div>
        <span id="textCount"></span> -  <span id="wordCount"></span>
    </div>
</div>
<div id="editor"></div>
<textarea class="form-control ltr" onc rows="3" style="border-top: unset;display: none;" id="editorTextarea"></textarea>


<div class="modal fade" id="fileManagerModal2" tabindex="-1" aria-labelledby="fileManagerModal2Label" aria-hidden="true">
    <div class="modal-dialog" style="height:90%; max-width:95%">
        <div class="modal-content" style="height:100%">
            <div class="modal-header">
                <h5 class="modal-title" id="fileManagerModal2Label">File Manager</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <CMS.Pages.Inside.FileManager.FileManagerCom SelectItem="SelectFile"></CMS.Pages.Inside.FileManager.FileManagerCom>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editImgProperty" tabindex="-1" aria-labelledby="editImgPropertyLabel" aria-hidden="true">
    <div class="modal-dialog" style="height:90%; max-width:95%">
        <div class="modal-content" style="height:100%">
            <div class="modal-header">
                <button class="btn btn-primary" type="button" @onclick="AddImg">افزودن</button>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="overflow: auto;">
                <div class="text-center">
                    <img src="@Model.Files.Item.GetThumbnail(imgUrl)">
                </div>
                <div class="mb-3col-sm-12">
                    <InputRadioGroup @bind-Value="imgAliType">
                        @foreach (var option in imgAliTypeOptions)
                        {
                            <InputRadio class="btn-check" id="@(option.Name+option.Value)" autocomplete="off" Value="option.Value" />
                            <label class="btn btn-outline-secondary" for="@(option.Name+option.Value)">@option.Name</label>
                        }
                    </InputRadioGroup>
                </div>

                <hr />

                <div class="mb-3">
                    <label class="form-label ">متن</label>
                    <input type="text" class="form-control" @bind="imgArt">
                </div>
                <div class="row">
                    <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
                        <label class="form-label ">کلاس</label>
                        <input type="text" class="form-control" @bind="imgClass">
                    </div>
                    <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
                        <label class="form-label ">نام گروه اسلاید شو</label>
                        <input type="text" class="form-control" @bind="imgSlideClass">
                    </div>
                </div>

                <hr />
                <div class="form-check form-switch mb-3 col-lg-4 col-md-6 col-sm-12">
                    <input class="form-check-input" type="checkbox" @bind="imgThumbnail">
                    <label class="form-check-label">استفاده از تصویر بند انگشتشتی</label>
                </div>
                <div class="row">
                    <div class="mb-3 col-lg-2 col-md-3 col-sm-6">
                        <label class="form-label ">عرض</label>
                        <input type="text" class="form-control" @bind="imgWidth">
                    </div>
                    <div class="mb-3 col-lg-2 col-md-3 col-sm-6">
                        <label class="form-label ">ارتفاع</label>
                        <input type="text" class="form-control" @bind="imgHeight">
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PageObj Obj { get; set; }

    private IJSObjectReference? moduleQuill;
    private IJSObjectReference? modulePost;

    string imgAliType = "1";
    string imgArt = "";
    string imgClass = "";
    string imgSlideClass = "";
    string imgHeight= "";
    string imgWidth = "";
    bool imgThumbnail = false;

    public List<Model.RadioGroup> imgAliTypeOptions => new List<Model.RadioGroup>()
    {
        new RadioGroup{ Name="None", Value="1"},
        new RadioGroup{ Name="right", Value="right"},
        new RadioGroup{ Name="left", Value="left"},
    };
    string? imgUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            moduleQuill = await Js.InvokeAsync<IJSObjectReference>(
                "import", "./comcss/quill.js");
            modulePost = await Js.InvokeAsync<IJSObjectReference>(
                "import", "./comcss/Post.js");
            await modulePost.InvokeVoidAsync("TextEditor.init");

            if (Obj.State == "edit")
            {
                await Js.InvokeVoidAsync("TextEditor.setContents", Obj.EditItem.Content);
            }
        }
        else
        {
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (moduleQuill is not null)
        {
            await moduleQuill.DisposeAsync();
        }
        if (modulePost is not null)
        {
            await modulePost.InvokeVoidAsync("TextEditor.dispose");
            await modulePost.DisposeAsync();
        }
    }

    private async Task SelectFile(Model.Files.Item model)
    {
        if (!model.IsImg)
        {
            await Obj.ErrorRequest(Result.Failure(message: "یک تصویر انتخاب کنید"));
            return;
        }
        await Js.InvokeVoidAsync("HideModal", "fileManagerModal2");
        if (model?.Url != null){
            imgUrl = model.Url;

            imgAliType = "1";
            imgArt = "";
            imgClass = "";
            imgSlideClass = "";
            imgHeight = "";
            imgWidth = "512";
            imgThumbnail = false;
            await Js.InvokeVoidAsync("ShowModal", "editImgProperty");
        }
    }

    private async Task AddImg()
    {
        if (string.IsNullOrEmpty(imgUrl))
            return;

        var url = imgThumbnail ? @Model.Files.Item.GetThumbnail(imgUrl) : imgUrl;

        var style = "";
        if (!string.IsNullOrEmpty(imgHeight))
            style += $"height:{imgHeight}px;";
        if (!string.IsNullOrEmpty(imgWidth))
            style += $"width:{imgWidth}px;";
        if (!string.IsNullOrEmpty(imgAliType) && imgAliType != "1")
            style += $"float: {imgAliType};";

        var obj = new
        {
            url = url,
            imgClass = $"content-img {imgClass}",
            imgStyle = style,
            imgArt = imgArt,
            imgSlideClass = imgSlideClass
        };

        await Js.InvokeVoidAsync("HideModal", "editImgProperty");
        await Js.InvokeVoidAsync("TextEditor.insertEmbed", obj);
    }

    private async Task VisibilEditor()
    {
        await Js.InvokeVoidAsync("TextEditor.Extension.Visibil");
    }

}
