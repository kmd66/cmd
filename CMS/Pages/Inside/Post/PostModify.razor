@using CMS.Model;
@inject IJSRuntime Js

@if (Obj.EditItem != null)
{
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="content-tab" data-bs-toggle="tab" data-bs-target="#content" type="button" role="tab" aria-controls="content" aria-selected="true">مطلب</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="meta-tab" data-bs-toggle="tab" data-bs-target="#meta" type="button" role="tab" aria-controls="meta" aria-selected="false">متا</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="property-tab" data-bs-toggle="tab" data-bs-target="#property" type="button" role="tab" aria-controls="property" aria-selected="false">خواص</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
  
        <div class="tab-pane my-3 fade show active" id="content" role="tabpanel" aria-labelledby="content-tab">
            <PostTabContent Obj="Obj" />

        </div>

        <div class="tab-pane my-3 fade" id="meta" role="tabpanel" aria-labelledby="meta-tab">
            <PostTabMeta Obj="Obj" />
        </div>

        <div class="tab-pane my-3 fade" id="property" role="tabpanel" aria-labelledby="property-tab">
            <PostTabProperty Obj="Obj" />
        </div>
    </div>

    <hr />
    <button class="btn btn-primary" type="button" @onclick="save">ذخیره</button>
    <NavLink href='cmd-admin/post/main' class="btn btn-outline-secondary">
        انصراف
    </NavLink>
}
@code {
    [Parameter]
    public PageObj Obj { get; set; }
    [Parameter]
    public string id { get; set; }


    protected async override Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(id) || Obj.State == "add")
            selectItem();
    }
    private async Task selectItem()
    {
        if (Obj.State == "add")
        {
            Obj.EditItem = new Post() { Published = true, Access = PostAccessType.Publiced };
            Obj.Tags = new List<Tag>();
        }
        else
        {
            await Obj.LoadHandler(true);

            //var result = await Obj.Helper.GetItem(Id);

            //if (!result.Success)
            //{
            //    Obj.EditItem = new Menu() { Published = true };
            //    await Obj.ErrorRequest(result);
            //    await Obj.LoadHandler(false);
            //    return;
            //}
            await Obj.LoadHandler(false);
        }

        StateHasChanged();
    }

    private async Task save()
    {
        await Obj.LoadHandler(true);
        Obj.EditItem.Content = await Js.InvokeAsync<string>("TextEditor.getContents");

        var result = await Obj.Helper.Save(Obj.EditItem, Obj.State);

        if (!result.Success)
        {
            await Obj.ErrorRequest(result);
            await Obj.LoadHandler(false);
            return;
        }
        await Obj.LoadHandler(false);
    }

}
