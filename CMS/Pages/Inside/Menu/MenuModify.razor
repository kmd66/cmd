@using CMS.Model;
@inject IJSRuntime Js
@inject NavigationManager _navManager;

@if (Obj.EditItem != null)
{
    <div class="row">
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label required">نام </label>
            <input @bind="Obj.EditItem.Name" type="text" class="form-control">
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label required">نام مستعار </label>
            <input @bind="Obj.EditItem.Alias" type="text" class="form-control">
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label required">نوع </label>
            <select class="form-select " aria-label="Default select example" @bind="Obj.EditItem.Type">
                @foreach (Model.MenuType type in Enum.GetValues<Model.MenuType>())
                {
                    <option value="@type">@type.ToString()</option>

                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">والد</label>
            <select class="form-select " aria-label="Default select example" @bind="Obj.EditItem.Parent">
                <option value="@Guid.Empty">ریشه</option>
            @foreach (var m in menues)
            {
                <option value="@m.UnicId">@m.Name</option>
            }
            </select>
        </div>

        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label required">انتشار</label>
            <select class="form-select " aria-label="Default select example" @bind="Obj.EditItem.PublishedString">
                    <option value="True">منتشر شده</option>
                    <option value="False">عدم انتشار</option>
            </select>
        </div>
    </div>
    @if (Obj.EditItem.Type == MenuType.Link)
    {
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label required">لینک </label>
            <input @bind="Obj.EditItem.Link" type="text" class="form-control ltr">
        </div>
    }
    <MenuPageImg Obj="Obj" Img="Obj.EditItem" />

    <button class="btn btn-primary" type="button" @onclick="save">ذخیره</button>
    <NavLink href='cmd-admin/menu/main' class="btn btn-outline-secondary">
        انصراف
    </NavLink>

    <MenuPageChild Obj="Obj" selectItem="selectItem" />
}

@code {
    [Parameter]
    public PageObj Obj { get; set; }
    [Parameter]
    public string id { get; set; }
    public Guid Id
    {
        get
        {
            try
            {
                return new Guid(id);
            }
            catch
            {

                return Guid.Empty;
            }
        }
    }

    List<Menu> menues = new List<Menu>();
    bool b = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    selectItem();
        //}
        //else
        //{
        //    if (Obj.EditItem.UnicId != Id)
        //    {
        //        selectItem();
        //    }
        //}
    }

    protected async override Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(id) || Obj.State == "add")
            selectItem();
    }

    private async Task selectItem()
    {
        if(Obj.State == "add")
        {
            Obj.EditItem = new Menu(){Published=true};
        }
        else
        {
            await Obj.LoadHandler(true);

            var result = await Obj.Helper.GetItem(Id);

            if (!result.Success)
            {
                Obj.EditItem = new Menu() { Published = true };
                await Obj.ErrorRequest(result);
                await Obj.LoadHandler(false);
                return;
            }
            await Obj.LoadHandler(false);
            Obj.EditItem = result.Data;
        }
        menues = Obj.Helper.GetList2(new MenuVM(), "|-", Obj.EditItem.UnicId).Data;
        StateHasChanged();
    }

    private async Task save()
    {
        await Obj.LoadHandler(true);

        var result = await Obj.Helper.Save(Obj.EditItem, Obj.State);

        if (!result.Success)
        {
            await Obj.ErrorRequest(result);
            await Obj.LoadHandler(false);
            return;
        }
        _navManager.NavigateTo("cmd-admin/menu/main");
        await Obj.LoadHandler(false);
        await Obj.ShowAlert(new Alert { alertType = AlertType.success, msg = "تغییرات انجام شد" });
    }
}
