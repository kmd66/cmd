@page "/cmd-admin/setting/social"
@inherits BacePage<BasePageObj>
@using CMS.Helper;
@using CMS.Model;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage localStorage

<PageTitle>setting social</PageTitle>
@{
    base.BuildRenderTree(__builder);
}
<div><h2>شبکه اجتماعی</h2></div>

@foreach (var slide in items)
{
    <div class="row">
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">
                لینک تصویر
            </label>
            <input type="text" @bind="slide.Img" class="form-control">
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12" style="position:relative">
            <label class="form-label">
                لینک
            </label>
            <input type="text" @bind="slide.Link" class="form-control">
            <span class="removeSpanTag" @onclick="(()=>removeProperty(slide))">×</span>
        </div>
    </div>
    <hr />
}

<button class="btn btn-primary" type="button" @onclick="addProperty">افزودن مقدارجدید</button>
<hr />

<div>
    <button class="btn btn-primary" type="button" @onclick="save">ذخیره</button>
    <NavLink href='cmd-admin/setting' class="btn btn-outline-secondary">
        بازگشت
    </NavLink>
</div>

@code {
    private BasePageObj obj = new BasePageObj() { State = "main" };
    public override BasePageObj Obj { get => obj; set => obj = value; }

    Option item = new Option();
    List<CMS.Model.Social> items = new List<Model.Social>();
    OptinHelper helper;

    protected override async Task OnInitializedAsync()
    {
        helper = new OptinHelper(true);
        item = Option.GetItem(OptionType.Social);
        if (!string.IsNullOrEmpty(item.Text))
        {
            items = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CMS.Model.Social>>(item.Text);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task save()
    {
        await Obj.LoadHandler(true);
        item.Text = Newtonsoft.Json.JsonConvert.SerializeObject(items);
        var result = await helper.Add(new List<Option>() { item });
        if (!result.Success)
        {
            await Obj.ErrorRequest(result);
        }
        else
        {
            await Obj.ShowAlert(new Alert { alertType = AlertType.success, msg = "تغییرات انجام شد" });
        }
        await Obj.LoadHandler(false);
    }

    private async Task addProperty()
    {
        items.Add(new Model.Social());
    }
    private async Task removeProperty(Model.Social model)
    {
        items.Remove(model);
    }
}