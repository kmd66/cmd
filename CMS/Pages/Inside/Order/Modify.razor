@using CMS.Model;
@inject IJSRuntime Js
@inject NavigationManager _navManager;


@if (Obj.EditItem != null)
{
    <div class="row">
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">کد رهگیری</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.TrackingCode</div>
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">نام</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.FirstName @Obj.EditItem.LastName</div>
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">تاریخ</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.Date.ToPersion()</div>
        </div>

        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">ایمیل</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.Mail</div>
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">شماره تماس</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.Mobile</div>
        </div>
        <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label">کد پساتی</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.PostalCode</div>
        </div>

        <div class="mb-3">
            <label class="form-label">آدرس</label>
            <div class="form-control" style="background-color: #e9ecef;">@Obj.EditItem.Address</div>

        </div>

    </div>
    <div class="mt-4">
        <label class="form-label">اقلام سفارش:</label>
    </div>
    <table class="table table-striped mb-3">
        <tbody>
            @foreach (var p in Obj.OrderGet.posts)
            {
                <tr>
                    <td style="width:60px" class="align-middle"><img src="@Model.Files.Item.GetThumbnail(p.Img)" /></td>
                    <td class="align-middle">@p.Title</td>

                </tr>
            }
        </tbody>
    </table>
    <div class="mb-3 col-lg-4 col-md-6 col-sm-12">
            <label class="form-label required">وضعیت</label>
            <select class="form-select " aria-label="Default select example" @bind="Obj.EditItem.Type">
            @foreach (Model.OrderType type in Enum.GetValues<Model.OrderType>())
            {
                        <option value="@type">@type.String()</option>
            }
            </select>
    </div>
    <div class="mb-3">
        <label class="form-label">پیام</label>
        <textarea class="form-control" id="descriptionTextarea" onc rows="3" @bind="Obj.EditItem.Text"></textarea>
    </div>

    <button class="btn btn-primary" type="button" @onclick="save">ذخیره</button>
    <NavLink href='cmd-admin/post/main' class="btn btn-outline-secondary mx-2">
        انصراف
    </NavLink>
}
@code {
    [Parameter]
    public PageObj Obj { get; set; }
    [Parameter]
    public string id { get; set; }

    Model.Post post { get; set; }
    bool isReply = false;
    public string reply { get; set; }

    private async Task setReply()
    {
        reply = "";
        isReply = true;
        StateHasChanged();
    }

    protected async override Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(id))
            selectEdit();
    }

    private async Task selectEdit()
    {
        await Obj.LoadHandler(true);

        var result = await Obj.Helper.Get(id);

        if (!result.Success)
        {
            await selectError(result);
            return;
        }
        Obj.EditItem = result.Data;
        
        var postResult = await Obj.Helper.GetyByTrackingCode(Obj.EditItem.TrackingCode);
        if (!postResult.Success)
        {
            await selectError(postResult);
            return;
        }
        Obj.OrderGet = postResult.Data;

        await Obj.LoadHandler(false);
        StateHasChanged();
    }

    private async Task selectError(Result result)
    {
        await Obj.ErrorRequest(result);
        await Obj.LoadHandler(false);
    }

    private async Task save()
    {
        await Obj.LoadHandler(true);
        var result = await Obj.Helper.Edit(Obj.EditItem);
        if (!result.Success)
        {
            await selectError(result);
            return;
        }

        _navManager.NavigateTo("cmd-admin/order/main");
        await Obj.LoadHandler(false);
        await Obj.ShowAlert(new Alert { alertType = AlertType.success, msg = "تغییرات انجام شد" });
    }

    private async Task remove()
    {
        await Obj.LoadHandler(true);
        var result = await Obj.Helper.Remove(Obj.EditItem.Id);
        if (!result.Success)
        {
            await selectError(result);
            return;
        }

        _navManager.NavigateTo("cmd-admin/order/main");
        await Obj.LoadHandler(false);
        await Obj.ShowAlert(new Alert { alertType = AlertType.success, msg = "تغییرات انجام شد" });
    }

}
